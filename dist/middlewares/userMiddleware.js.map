{"version":3,"sources":["../../src/middlewares/userMiddleware.js"],"names":["resErr","ResponseMsg","UserMiddlewares","req","res","next","email","body","UserServices","getUserByEmail","data","message","user","dataValues","decoded","Utils","decodeToken","query","token","isVerified"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;IAEQA,M,GAAWC,oB,CAAXD,M;AAER;;;;IAGqBE,e;;;;;;;;;;AACrB;;;;;;;;;;;oDAQ+BC,G,EAAKC,G,EAAKC,I;;;;;;;AAE3BC,gBAAAA,K,GAAUH,GAAG,CAACI,I,CAAdD,K;;uBACWE,yBAAaC,cAAb,CAA4BH,KAA5B,C;;;AAAbI,gBAAAA,I;;oBACDA,I;;;;;iDAAaL,IAAI,E;;;iDACfL,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,iEAAX,C;;;;;iDAENJ,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,YAAMO,OAAjB,C;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;;;;;qDAQ2BR,G,EAAKC,G,EAAKC,I;;;;;;;AAEzBC,gBAAAA,K,GAAUH,GAAG,CAACI,I,CAAdD,K;;uBACWE,yBAAaC,cAAb,CAA4BH,KAA5B,C;;;AAAbI,gBAAAA,I;;qBACFA,I;;;;;AACFP,gBAAAA,GAAG,CAACS,IAAJ,GAAWF,IAAI,CAACG,UAAhB;kDACOR,IAAI,E;;;kDAENL,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,mCAAX,C;;;;;kDAENJ,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,aAAMO,OAAjB,C;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;;;;;qDAQ+BR,G,EAAKC,G,EAAKC,I;;;;;;;AAE7BO,gBAAAA,I,GAAST,G,CAATS,I;;uBACWJ,yBAAaC,cAAb,CAA4BG,IAAI,CAACN,KAAjC,C;;;AAAbI,gBAAAA,I;;qBACFA,I;;;;;kDAAaL,IAAI,E;;;kDACdL,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,wDAAX,C;;;;;kDAENJ,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,aAAMO,OAAjB,C;;;;;;;;;;;;;;;;AAKjB;;;;;;;;;;;;;;qDAQ4BR,G,EAAKC,G,EAAKC,I;;;;;;;AAE5BS,gBAAAA,O,GAAUC,kBAAMC,WAAN,CAAkBb,GAAG,CAACc,KAAJ,CAAUC,KAA5B,C;;uBACGV,yBAAaC,cAAb,CAA4BK,OAAO,CAACR,KAApC,C;;;AAAbM,gBAAAA,I;;oBACDA,IAAI,CAACO,U;;;;;kDAAmBd,IAAI,E;;;kDAC1BL,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,sDAAX,C;;;;;kDAENJ,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,6BAAX,C","sourcesContent":["import Utils from '../utils';\nimport UserServices from '../services/userServices';\nimport ResponseMsg from '../utils/response';\n\nconst { resErr } = ResponseMsg;\n\n/**\n * User Middlewares Class\n */\nexport default class UserMiddlewares {\n/**\n * @name checkUserExists\n * @description Checks if a user exists in the database\n * @param {object} req The request object\n * @param {object} res The response object\n * @param {object} next The response object\n * @returns {object} The API response or next()\n */\n  static async checkUserExists(req, res, next) {\n    try {\n      const { email } = req.body;\n      const data = await UserServices.getUserByEmail(email);\n      if (!data) return next();\n      return resErr(res, 409, 'Unsuccesful, user already exists, kindly use a different email.');\n    } catch (error) {\n      return resErr(res, 500, error.message);\n    }\n  }\n\n  /**\n   * @name doesUserExist\n   * @description Checks if a user exists in the database\n   * @param {object} req The request object\n   * @param {object} res The response object\n   * @param {object} next The response object\n   * @returns {object} The API response or next()\n   */\n  static async doesUserExist(req, res, next) {\n    try {\n      const { email } = req.body;\n      const data = await UserServices.getUserByEmail(email);\n      if (data) {\n        req.user = data.dataValues;\n        return next();\n      }\n      return resErr(res, 404, 'Unsuccesful, User does not exist.');\n    } catch (error) {\n      return resErr(res, 500, error.message);\n    }\n  }\n\n  /**\n   * @name confirmUserExists\n   * @description Checks if a user exists in the database\n   * @param {object} req The request object\n   * @param {object} res The response object\n   * @param {object} next The response object\n   * @returns {object} The API response or next()\n   */\n  static async confirmUserExists(req, res, next) {\n    try {\n      const { user } = req;\n      const data = await UserServices.getUserByEmail(user.email);\n      if (data) return next();\n      return resErr(res, 409, 'Unsuccesful, User does not exist. Please contact Admin');\n    } catch (error) {\n      return resErr(res, 500, error.message);\n    }\n  }\n\n\n  /**\n   * @name userVerified\n   * @description Checks if a user is verified in the database\n   * @param {object} req The request object\n   * @param {object} res The response object\n   * @param {object} next The response object\n   * @returns {object} The API response or next()\n   */\n  static async isUserVerified(req, res, next) {\n    try {\n      const decoded = Utils.decodeToken(req.query.token);\n      const user = await UserServices.getUserByEmail(decoded.email);\n      if (!user.isVerified) return next();\n      return resErr(res, 400, 'Unsuccesful, Your account has already been Verified.');\n    } catch (error) {\n      return resErr(res, 500, 'Link is Invalid or expired.');\n    }\n  }\n}\n"],"file":"userMiddleware.js"}