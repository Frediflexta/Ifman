{"version":3,"sources":["../../src/middlewares/authenticate.js"],"names":["resErr","ResponseMsg","AuthenticateUser","req","res","next","token","headers","authorization","split","decoded","Utils","decodeToken","UserServices","getUserByEmail","email","user","message","isAdmin"],"mappings":";;;;;;;;;;;;;;;;;AACA;;AACA;;AACA;;AAHA;IAKQA,M,GAAWC,oB,CAAXD,M;AAER;;;;;;IAKME,gB;;;;;;;;;;AACJ;;;;;;;;;;;oDAQyBC,G,EAAKC,G,EAAKC,I;;;;;;AAC7BC,gBAAAA,K,GAAQH,GAAG,CAACI,OAAJ,CAAYC,a;;oBACnBF,K;;;;;iDACIN,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,mBAAX,C;;;AAEfE,gBAAAA,KAAK,GAAGA,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAR;;AAGQC,gBAAAA,O,GAAUC,kBAAMC,WAAN,CAAkBN,KAAlB,C;;uBACGO,yBAAaC,cAAb,CAA4BJ,OAAO,CAACK,KAApC,C;;;AAAbC,gBAAAA,I;;oBACDA,I;;;;;iDACIhB,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,eAAX,C;;;AAEfD,gBAAAA,GAAG,CAACa,IAAJ,GAAWA,IAAX;iDACOX,IAAI,E;;;;;iDAEJL,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,YAAMa,OAAjB,C;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;;gCAQmBd,G,EAAKC,G,EAAKC,I,EAAM;AACjC,UAAI,CAACF,GAAG,CAACa,IAAJ,CAASE,OAAd,EAAuB;AACrB,eAAOlB,MAAM,CAACI,GAAD,EAAM,GAAN,EAAW,qBAAX,CAAb;AACD;;AACD,aAAOC,IAAI,EAAX;AACD;;;;;eAGYH,gB","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport Utils from '../utils';\nimport ResponseMsg from '../utils/response';\nimport UserServices from '../services/userServices';\n\nconst { resErr } = ResponseMsg;\n\n/**\n * @class AuthenticateUser\n * @description Contains methods for user authentication\n * @exports AuthenticateUser\n */\nclass AuthenticateUser {\n  /**\n   * @method verifyToken\n   * @description Verifies if token is valid\n   * @param  {object} req - The user request object\n   * @param  {object} res - The user res response object\n   * @param  {function} next - The next() Function\n   * @returns {object} req.user - The payload object\n   */\n  static async verifyToken(req, res, next) {\n    let token = req.headers.authorization;\n    if (!token) {\n      return resErr(res, 400, 'No token Provided');\n    }\n    token = token.split(' ')[1];\n\n    try {\n      const decoded = Utils.decodeToken(token);\n      const user = await UserServices.getUserByEmail(decoded.email);\n      if (!user) {\n        return resErr(res, 400, 'Invalid Token');\n      }\n      req.user = user;\n      return next();\n    } catch (error) {\n      return resErr(res, 500, error.message);\n    }\n  }\n\n  /**\n   * @method verifyAdmin\n   * @description verifies the user token to determine if the user is admin or not\n   * @param {object} req - The Request Object\n   * @param {object} res - The Response Object\n   * @param {object} next - The next Object\n   * @returns {object} JSON API Response\n   */\n  static verifyAdmin(req, res, next) {\n    if (!req.user.isAdmin) {\n      return resErr(res, 403, 'Unauthorized Access');\n    }\n    return next();\n  }\n}\n\nexport default AuthenticateUser;\n"],"file":"authenticate.js"}