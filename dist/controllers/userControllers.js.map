{"version":3,"sources":["../../src/controllers/userControllers.js"],"names":["resLong","ResponseMsg","resErr","UserController","req","res","email","body","password","hashedPassword","Utils","hashPassword","UserServices","createUser","user","token","generateToken","set","message","getUserByEmail","comparePassword","name","userData","updateUserInfoById","data"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;IAEQA,O,GAAoBC,oB,CAApBD,O;IAASE,M,GAAWD,oB,CAAXC,M;AAEjB;;;;;;IAKMC,c;;;;;;;;;;AACJ;;;;;;;;;;oDAOoBC,G,EAAKC,G;;;;;;;AAEbC,gBAAAA,K,GAAUF,GAAG,CAACG,I,CAAdD,K;AACFE,gBAAAA,Q,GAAaJ,GAAG,CAACG,I,CAAjBC,Q;AACAC,gBAAAA,c,GAAiBC,kBAAMC,YAAN,CAAmBH,QAAnB,C;AACvBA,gBAAAA,QAAQ,GAAGC,cAAX;;uBACmBG,yBAAaC,UAAb,CAAwB;AAAEP,kBAAAA,KAAK,EAALA,KAAF;AAASE,kBAAAA,QAAQ,EAARA;AAAT,iBAAxB,C;;;AAAbM,gBAAAA,I;AACAC,gBAAAA,K,GAAQL,kBAAMM,aAAN,CAAoB;AAAEV,kBAAAA,KAAK,EAALA;AAAF,iBAApB,C;AACdD,gBAAAA,GAAG,CAACY,GAAJ,CAAQ,eAAR,mBAAmCF,KAAnC;iDACOf,OAAO,CAACK,GAAD,EAAM,GAAN,oBAAgBS,IAAhB;AAAsBC,kBAAAA,KAAK,EAALA;AAAtB,mB;;;;;iDAEPb,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,YAAMa,OAAjB,C;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;;;;qDAOoBd,G,EAAKC,G;;;;;;;;4BAEOD,GAAG,CAACG,I,EAAxBD,K,aAAAA,K,EAAOE,Q,aAAAA,Q;;uBACII,yBAAaO,cAAb,CAA4Bb,KAA5B,C;;;AAAbQ,gBAAAA,I;;qBACFJ,kBAAMU,eAAN,CAAsBZ,QAAtB,EAAgCM,IAAI,CAACN,QAArC,C;;;;;AACF,uBAAOM,IAAI,CAACN,QAAZ;AACMO,gBAAAA,K,GAAQL,kBAAMM,aAAN,CAAoB;AAAEV,kBAAAA,KAAK,EAALA;AAAF,iBAApB,C;kDACPN,OAAO,CAACK,GAAD,EAAM,GAAN,EAAW;AAAES,kBAAAA,IAAI,EAAJA,IAAF;AAAQC,kBAAAA,KAAK,EAALA;AAAR,iBAAX,C;;;kDAETb,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,gFAAX,C;;;;;;sBAET,aAAMgB,IAAN,KAAe,W;;;;;kDACVnB,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,sCAAX,C;;;kDAERH,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,aAAMa,OAAjB,C;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;;;;qDAO4Bd,G,EAAKC,G;;;;;;;AAEvBiB,gBAAAA,Q,qBAAgBlB,GAAG,CAACG,I;AAClBO,gBAAAA,I,GAASV,G,CAATU,I;AACRQ,gBAAAA,QAAQ,CAACd,QAAT,GAAoBE,kBAAMC,YAAN,CAAmBW,QAAQ,CAACd,QAA5B,CAApB;;uBACmBI,yBAAaW,kBAAb,mBAAqCD,QAArC,GAAiDR,IAAI,CAACR,KAAtD,C;;;AAAbkB,gBAAAA,I;kDACCxB,OAAO,CAACK,GAAD,EAAM,GAAN,EAAWmB,IAAX,C;;;;;kDAEPtB,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,aAAMa,OAAjB,C;;;;;;;;;;;;;;;;;;;;eAIJf,c","sourcesContent":["import Utils from '../utils';\nimport UserServices from '../services/userServices';\nimport ResponseMsg from '../utils/response';\n\nconst { resLong, resErr } = ResponseMsg;\n\n/**\n * @class UserController\n * @description Contains methods for each user related endpoint\n * @exports UserController\n */\nclass UserController {\n  /**\n  * @method signUp\n  * @description Adds a user to the database\n  * @param {object} req - The Request Object\n  * @param {object} res - The Response Object\n  * @returns {object} JSON API Response\n  */\n  static async signUp(req, res) {\n    try {\n      const { email } = req.body;\n      let { password } = req.body;\n      const hashedPassword = Utils.hashPassword(password);\n      password = hashedPassword;\n      const user = await UserServices.createUser({ email, password });\n      const token = Utils.generateToken({ email });\n      res.set('Authorization', `Bearer ${token}`);\n      return resLong(res, 201, { ...user, token });\n    } catch (error) {\n      return resErr(res, 500, error.message);\n    }\n  }\n\n  /**\n  * @method signIn\n  * @description Logs in a user\n  * @param {object} req - The Request Object\n  * @param {object} res - The Response Object\n  * @returns {object} JSON API Response\n  */\n  static async signIn(req, res) {\n    try {\n      const { email, password } = req.body;\n      const user = await UserServices.getUserByEmail(email);\n      if (Utils.comparePassword(password, user.password)) {\n        delete user.password;\n        const token = Utils.generateToken({ email });\n        return resLong(res, 200, { user, token });\n      }\n      return resErr(res, 401, 'The email and password you entered does not exist! Please check and try again.');\n    } catch (error) {\n      if (error.name === 'emailNull') {\n        return resErr(res, 404, 'No user found for the provided email');\n      }\n      return resErr(res, 500, error.message);\n    }\n  }\n\n  /**\n * @name updateUserInfo\n * @description Updates user profile to complete registration\n * @param {object} req The request object\n * @param {object} res The response object\n * @returns {object} The API response\n */\n  static async updateUserInfo(req, res) {\n    try {\n      const userData = { ...req.body };\n      const { user } = req;\n      userData.password = Utils.hashPassword(userData.password);\n      const data = await UserServices.updateUserInfoById({ ...userData }, user.email);\n      return resLong(res, 201, data);\n    } catch (error) {\n      return resErr(res, 500, error.message);\n    }\n  }\n}\nexport default UserController;\n"],"file":"userControllers.js"}