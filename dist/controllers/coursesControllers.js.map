{"version":3,"sources":["../../src/controllers/coursesControllers.js"],"names":["resLong","ResponseMsg","resErr","CourseController","req","res","CourseServices","createCourse","body","newCourse","message","getAllCourse","result","id","params","getCourseById","userCourse","updateUserById","user","getCourse","userid","courseid","course"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;IAEQA,O,GAAoBC,oB,CAApBD,O;IAASE,M,GAAWD,oB,CAAXC,M;AAEjB;;;;;;IAKMC,gB;;;;;;;;;;AACJ;;;;;;;;;;oDAO0BC,G,EAAKC,G;;;;;;;;uBAEHC,2BAAeC,YAAf,CAA4BH,GAAG,CAACI,IAAhC,C;;;AAAlBC,gBAAAA,S;iDACCT,OAAO,CAACK,GAAD,EAAM,GAAN,EAAWI,SAAX,C;;;;;iDAEPP,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,YAAMK,OAAjB,C;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;;;;qDAOwBN,G,EAAKC,G;;;;;;;;uBAEJC,2BAAeK,YAAf,E;;;AAAfC,gBAAAA,M;kDACCZ,OAAO,CAACK,GAAD,EAAM,GAAN,EAAWO,MAAX,C;;;;;kDAEPV,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,aAAMK,OAAjB,C;;;;;;;;;;;;;;;;AAIjB;;;;;;;;;;;;;qDAOwBN,G,EAAKC,G;;;;;;AACnBG,gBAAAA,I,GAAyBJ,G,CAAzBI,I,EAAgBK,E,GAAST,G,CAAnBU,M,CAAUD,E;;;uBAEGP,2BAAeS,aAAf,CAA6BF,EAA7B,C;;;AAAnBG,gBAAAA,U;;qBAEFA,U;;;;;kDACKd,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,+CAAX,C;;;;uBAESC,2BAAeW,cAAf,CAA8B;AAAEJ,kBAAAA,EAAE,EAAFA,EAAF;AAAMK,kBAAAA,IAAI,EAAEV,IAAI,CAACK;AAAjB,iBAA9B,C;;;AAAlBJ,gBAAAA,S;;uBACeH,2BAAea,SAAf,CAAyBV,SAAS,CAACW,MAAnC,EAA2CX,SAAS,CAACY,QAArD,C;;;AAAfC,gBAAAA,M;kDACCtB,OAAO,CAACK,GAAD,EAAM,GAAN,oBAAgBiB,MAAhB,E;;;;;kDAEPpB,MAAM,CAACG,GAAD,EAAM,GAAN,EAAW,aAAMK,OAAjB,C;;;;;;;;;;;;;;;;;;;;eAIJP,gB","sourcesContent":["import CourseServices from '../services/courseServices';\nimport ResponseMsg from '../utils/response';\n\nconst { resLong, resErr } = ResponseMsg;\n\n/**\n * @class CourseController\n * @description Contains methods for each user related endpoint\n * @exports CourseController\n */\nclass CourseController {\n  /**\n    * @method CreateCourse\n    * @description Adds a course to the database\n    * @param {object} req - The Request Object\n    * @param {object} res - The Response Object\n    * @returns {object} JSON API Response\n    */\n  static async CreateCourse(req, res) {\n    try {\n      const newCourse = await CourseServices.createCourse(req.body);\n      return resLong(res, 201, newCourse);\n    } catch (error) {\n      return resErr(res, 500, error.message);\n    }\n  }\n\n  /**\n    * @method GetCourses\n    * @description Fetches all courses from the database\n    * @param {object} req - The Request Object\n    * @param {object} res - The Response Object\n    * @returns {object} JSON API Response\n    */\n  static async GetCourses(req, res) {\n    try {\n      const result = await CourseServices.getAllCourse();\n      return resLong(res, 200, result);\n    } catch (error) {\n      return resErr(res, 400, error.message);\n    }\n  }\n\n  /**\n    * @method takeCourse\n    * @description Adds a users course details to the database\n    * @param {object} req - The Request Object\n    * @param {object} res - The Response Object\n    * @returns {object} JSON API Response\n    */\n  static async takeCourse(req, res) {\n    const { body, params: { id } } = req;\n    try {\n      const userCourse = await CourseServices.getCourseById(id);\n\n      if (userCourse) {\n        return resErr(res, 400, 'You can\\'t register for the same course twice');\n      }\n      const newCourse = await CourseServices.updateUserById({ id, user: body.id });\n      const course = await CourseServices.getCourse(newCourse.userid, newCourse.courseid);\n      return resLong(res, 201, { ...course });\n    } catch (error) {\n      return resErr(res, 400, error.message);\n    }\n  }\n}\nexport default CourseController;\n"],"file":"coursesControllers.js"}