{"version":3,"sources":["../../src/validatation/schema.js"],"names":["Schema","schema","email","Joi","string","trim","lowercase","minDomainSegments","required","password","min","courseTitle","memberFees","number","nonMemberFees","startDate","date","format","endDate","firstName","regex","error","errors","forEach","err","type","message","middleName","lastName","birthDate","gender","phoneNumber","defaultCountry","validate"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport Joi from '@hapi/joi';\n\n/**\n * @class Schema\n * @description Validates user input.\n * @exports Schema\n */\nclass Schema {\n  /**\n    * @method createUserSchema\n    * @description Validates the user object from a post request\n    * @param {object} user - The user object to be validated\n    * @returns {object} An object specifying weather the input was valid or not.\n    */\n  static createUserSchema() {\n    const schema = {\n      email: Joi.string().trim().lowercase().email({ minDomainSegments: 2 })\n        .required(),\n      password: Joi.string().min(8).required(),\n    };\n    return schema;\n  }\n\n  /**\n    * @method loginSchema\n    * @description Validates the login details from a post request\n    * @param {object} login - The login object to be validated\n    * @returns {object} An object specifying weather the input was valid or not.\n    */\n  static loginSchema() {\n    const schema = {\n      email: Joi.string().trim().lowercase().email({ minDomainSegments: 2 })\n        .required(),\n      password: Joi.string().min(8).required(),\n    };\n    return schema;\n  }\n\n  /**\n  * @method createCourse\n  * @description Validates the course details from a post request\n  * @param {object} course - The account object to be validated\n  * @returns {object} An object specifying weather the input was valid or not.\n  */\n  static createCourse() {\n    const schema = {\n      courseTitle: Joi.string().trim().lowercase().required(),\n      memberFees: Joi.number().min(2000).required(),\n      nonMemberFees: Joi.number().min(2000).required(),\n      startDate: Joi.date().format('YYYY-MM-DD').required(),\n      endDate: Joi.date().format('YYYY-MM-DD').required(),\n    };\n    return schema;\n  }\n\n  /**\n    * @method userProfileSchema\n    * @description Validates the user object from a post request\n    * @param {object} user - The user object to be validated\n    * @returns {object} An object specifying weather the input was valid or not.\n    */\n  static userProfileSchema() {\n    const schema = {\n      firstName: Joi.string().lowercase().trim().required()\n        .regex(/^[a-zA-Z]+$/)\n        .error((errors) => {\n          errors.forEach((err) => {\n            switch (err.type) {\n              case 'string.regex.base':\n                err.message = 'first_name can only contain letters';\n                break;\n              default:\n                break;\n            }\n          });\n          return errors;\n        }),\n      middleName: Joi.string().lowercase().trim().required()\n        .regex(/^[a-zA-Z]+$/)\n        .error((errors) => {\n          errors.forEach((err) => {\n            switch (err.type) {\n              case 'string.regex.base':\n                err.message = 'last_name can only contain letters';\n                break;\n              default:\n                break;\n            }\n          });\n          return errors;\n        }),\n      lastName: Joi.string().lowercase().trim().required()\n        .regex(/^[a-zA-Z]+$/)\n        .error((errors) => {\n          errors.forEach((err) => {\n            switch (err.type) {\n              case 'string.regex.base':\n                err.message = 'last_name can only contain letters';\n                break;\n              default:\n                break;\n            }\n          });\n          return errors;\n        }),\n      birthDate: Joi.date().format('YYYY-MM-DD').required(),\n      gender: Joi.string().trim().lowercase().required(),\n      phoneNumber: Joi.string().phoneNumber({ defaultCountry: 'BE', format: 'e164' }).validate('494322456'),\n    };\n    return schema;\n  }\n}\n\nexport default Schema;\n"],"file":"schema.js"}